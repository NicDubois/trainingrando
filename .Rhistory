listcol02 <- paste(listcol01, sep='+,')
listcol02
listcol02 <- paste(epsilon, sep='+,')
listcol02
listcol02 <- paste(epsilon, sep='+,')
listcol02 <- paste(epsilon, sep=' l ,')[[2]]
listcol02
listcol02 <- paste(epsilon, sep='  ,')[[2]]
listcol02
listcol02 <- paste(epsilon, sep=',')[[2]]
listcol02
listcol02 <- paste(listcol01, sep=',')[[2]]
listcol02
listcol02 <- paste(listcol01, sep=',')
listcol02
script <- paste("TimePoint_",seq(1,nTimePoints),sep='')
script
listcol02 <- paste(listcol01, sep=' + ')
listcol02
listcol02 <- paste(epsilon, sep=' + ')
listcol02
epsilon
listcol02 <- paste(script, sep=' + ')
listcol02
listcol02 <- paste(script, sep='')
listcol02
paste(c("A","B","C"))
paste("A","B")
paste("A","B")
paste(c("A","B"))
paste(c("A","B"),collapse = TRUE)
paste(c("A","B"),collapse = ",")
paste(listcol01,collapse = ",")
paste(listcol01,collapse = ",")
listcol02 <- paste(listcol01,collapse = ",")
listcol02
epsilon2 <- tidyr::gather(rmvnormTibbles,listcol02, key="TimePoint",value="Residuals")
epsilon2 <- tidyr::gather(rmvnormTibbles,eval(listcol02), key="TimePoint",value="Residuals")
rmvnormTibbles
rmvnormTibbles %>% pivot_longer(-usubjid, name_to = TimePoint, values_to = Residuals)
rmvnormTibbles %>% pivot_longer(-usubjid, name_to = "TimePoint", values_to = "Residuals")
rmvnormTibbles %>% pivot_longer(-usubjid, values_to = "Residuals")
rmvnormTibbles %>% pivot_longer(-usubjid,names_to = "TimePoint", values_to = "Residuals")
epsilon <-rmvnormTibbles %>% tidyr::pivot_longer(-rmvnormTibbles$usubjid,names_to = "TimePoint", values_to = "Residuals")
epsilon <-rmvnormTibbles %>% tidyr::pivot_longer(-usubjid,names_to = "TimePoint", values_to = "Residuals")
nobs=NA
is.na(nobs)
AddAResponse <- function(RandoDataFrame,nobs=NA,ResponseUnit='',RespValues)
{
if is.na(nobs){
nobs <- dim(RandoDataFrame)[1]
}
responseValues <- rep(Intercept,times=nobs)
response <- list(Values=responseValues,ResponseUnit=ResponseUnit,DistributionOfError='',Model='Y = \n mu0',ModelWith='With \n')
class(response) <- c("TrainRandoResp","list")
return(response)
}
#' AddAResponse
#'
#' @param RandoDataFrame a TrainRandoSubj object with the randomization data
#' @param nobs the number of observations in the dataset by default
#'  the number of rows in RandoDataFrame
#' @param ResponseUnit a character string with the unit of the response
#' @param RespValues can be a fixed value intercept which will be repeated nobs times
#' or a numerical vector of the same lenght than nobs.
#' @return response TrainRandoResp object with a response variable
#'  (dependent variable)
#' @examples
#' data("myArms","myRandoDataFrame","myprogfact")
#' myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame, ResponseUnit='Weight (in kg)',Intercept=70)
#' @export
AddAResponse <- function(RandoDataFrame,nobs=NA,ResponseUnit='',RespValues)
{
if is.na(nobs){
nobs <- dim(RandoDataFrame)[1]
}
responseValues <- rep(Intercept,times=nobs)
response <- list(Values=responseValues,ResponseUnit=ResponseUnit,DistributionOfError='',Model='Y = \n mu0',ModelWith='With \n')
class(response) <- c("TrainRandoResp","list")
return(response)
}
if is.na(nobs){
nobs <- dim(RandoDataFrame)[1]
}
{}
1+1
length(RespValues)
RespValues=70
RespValues=70
length(RespValues)
devtools::use_vignette("Models")
?use_vignette
usethis::use_vignette("Models")
myRandoDataFrame$V2
myRandoDataFrame
print(myRandoDataFrame)
?head
myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame,ResponseUnit='Weight (in kg)',RespValues=70)
?AddAResponse
library(trainingrando)
myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame,ResponseUnit='Weight (in kg)',RespValues=70)
?AddAResponse
# SAS SAT stat 14.3 User guide Linear Model page 117
# Y = X beta + Z gamma + epsilon
# whith Gamma ~ N(0,G) and epsilon ~ N(0,R)
#' UniformCorrelation
#'
#' @param rho the pearson correlation parameter (should be between -1 and 1)
#' @param sigma2 the residual variance
#' @param nTimePoints the number of timepoints
#' @return VarCovMatr a VarCovMatr object which is a squared matrix defining the covariance structure.
#' @examples
#' VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6)
#' @import matrixcalc
#' @export
UniformCorrelation <- function(rho,sigma2,nTimePoints)
{
if(abs(rho)>1){
print(rho)
stop(paste("rho should be between -1 and 1 (Here rho=",rho,")",sep=''))
}
if(sigma2<0){
print(sigma2)
stop(paste("sigma2 cannot be negative",sigma2,")"))
}
UC <- sigma2*(matrix(rho,nrow=nTimePoints, ncol=nTimePoints) - rho*diag(nTimePoints) + diag(nTimePoints))
if(!matrixcalc::is.positive.semi.definite(UC)){
print(UC)
stop('The variance covariance matrix is not semi positive definite')
}
return(UC)
}
#' espsilonVarCov
#'
#' @param VarCovMatr a VarCovMatr object which is a squared matrix defining the covariance structure
#' @param nTimePoints the number of timepoints
#' @inheritParams AddAResponse
#' @return epsilon
#' @examples myespilon <- espsilonVarCov(VarCovMatr=myVarCovMatr,RandoDataFrame=myRandoDataFrame, nTimePoints=6)
#' @import mvtnorm tidyr
#' @export
espsilonVarCov <- function(VarCovMatr, nTimePoints,RandoDataFrame){
# Creation of the epsilon vector
Exp <- rep(x=0,times=nTimePoints)
rmvnormMatrix <- mvtnorm::rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint_",seq(1,nTimePoints),sep='')
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
rmvnormTibbles$usubjid <- RandoDataFrame$usubjid
epsilon <-rmvnormTibbles %>% tidyr::pivot_longer(-usubjid,names_to = "TimePoint", values_to = "Residuals")
return(epsilon)
}
#' RandomEffect
#'
#' @description Creation of a vector of the random effect
#' @param randomeffect an independent variable which is modeled as a random effect.
#' @param VARRandoEffect The variance of the random effect
#' @return ZGamma1
#' @examples myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10)
#' @export
RandomEffect <- function(randomeffect,VARRandoEffect)
{
nlevelRando <- length(unique(randomeffect))
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
dum <- dummies::dummy(randomeffect)
ZGamma <- dum %*% EffectRando1
return(ZGamma)
}
VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=8)
?ArmLevelProg
myprogfact <- CreatePrgFact(progfactLabel = "Age Group",progfactLevels=c("0-18 years", "19-35 years","36-60 years","> 60 years"))
myprogfact <- AddNewPrgFact(currentProgfact=myprogfact,progfactLabel = "Type of Tumor",progfactLevels=c("A", "B","C"))
myprogfact <- AddNewPrgFact(currentProgfact=myprogfact,progfactLabel = "Genotype.",progfactLevels=c("Genotype A", "Genotype B","Genotype C"))
library(trainingrando)
library(trainingrando)
myprogfact <- CreatePrgFact(progfactLabel = "Sites",progfactLevels=c("Site01", "Site02","Site03","Site04","Site05","Site06","Site07","Site08","Site09","Site10","Site11","Site12","Site13","Site14","Site15"))
myArms <- ArmLevelProg(data.frame("Name" = c('TETA 4HCL', 'Penicillamine')))
myArms
View(myArms)
View(myArms)
myRandoDataFrame <- GenStudyTrial(npat = 46, progfact = myprogfact, Arms=myArms)
myRandoDataFrame
myVarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=7)
myepsilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=7, RandoDataFrame=myRandoDataFrame)
myepsilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=7, RandoDataFrame=myRandoDataFrame)
myepsilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=7)
#' espsilonVarCov
#'
#' @param VarCovMatr a VarCovMatr object which is a squared matrix defining the covariance structure
#' @param nTimePoints the number of timepoints
#' @param replicates the number of timepoints
#' @inheritParams AddAResponse
#' @return epsilon
#' @examples myespilon <- espsilonVarCov(VarCovMatr=myVarCovMatr,RandoDataFrame=myRandoDataFrame, nTimePoints=6, replicates=1)
#' @import mvtnorm tidyr
#' @export
espsilonVarCov <- function(VarCovMatr, nTimePoints,RandoDataFrame,replicates=1){
# Creation of the epsilon vector
Exp <- rep(x=0,times=nTimePoints)
nrmv <- dim(myRandoDataFrame)[1] * replicates
rmvnormMatrix <- mvtnorm::rmvnorm(n=nrmv, mean=Exp, sigma=VarCovMatr)
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint_",seq(1,nTimePoints),sep='')
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
rmvnormTibbles$usubjid <- RandoDataFrame$usubjid
epsilon <-rmvnormTibbles %>% tidyr::pivot_longer(-usubjid,names_to = "TimePoint", values_to = "Residuals")
return(epsilon)
}
myepsilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=7, RandoDataFrame=myRandoDataFrame)
myepsilon
#' RandomEffect
#'
#' @description Creation of a vector of the random effect
#' @param randomeffect an independent variable which is modeled as a random effect.
#' @param VARRandoEffect The variance of the random effect
#' @return ZGamma1
#' @examples myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10)
#' @export
RandomEffect <- function(randomeffect,VARRandoEffect)
{
nlevelRando <- length(unique(randomeffect))
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
dum <- dummies::dummy(randomeffect)
ZGamma <- dum %*% EffectRando1
return(ZGamma)
}
myRandoDataFrame$V2
myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10)
myZGamma
myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=2)
30¨2
30^2
myepsilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=7, RandoDataFrame=myRandoDataFrame)
myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10)
View(myRandoDataFrame)
View(myRandoDataFrame)
myResponse <- RespAddFixedEffect(Response=myResponse,RandoDataFrame=myRandoDataFrame,ColID=3, BetaVector=c(-30,0))
myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame,ResponseUnit='Serum NCC (in µg/L)',RespValues=60)
myResponse
View(myResponse)
View(myResponse)
View(myResponse)
#' AddAResponse
#'
#' @param RandoDataFrame a TrainRandoSubj object with the randomization data
#' @param nobs the number of observations in the dataset by default
#'  the number of rows in RandoDataFrame
#' @param ResponseUnit a character string with the unit of the response
#' @param RespValues can be a fixed value intercept which will be repeated nobs times
#' or a numerical vector of the same lenght than nobs.
#' @return response TrainRandoResp object with a response variable
#'  (dependent variable)
#' @examples
#' data("myArms","myRandoDataFrame","myprogfact")
#' myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame, ResponseUnit='Weight (in kg)',RespValues=70)
#' @export
#'
AddAResponse <- function(RandoDataFrame, nobs=NA, ResponseUnit='', RespValues)
{
if(is.na(nobs)){
nobs <- dim(RandoDataFrame)[1]
}
if(length(RespValues)==1){
responseValues <- rep(RespValues,times=nobs)
}
else if(length(RespValues)==nobs){
responseValues <- RespValues
}
else {
stop(paste("RespValues should have a length of either 1 or equal to nobs (Here length(RespValue)=",length(RespValue),")",sep=''))
}
myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame,ResponseUnit='Serum NCC (in µg/L)',RespValues=60)
#' AddAResponse
#'
#' @param RandoDataFrame a TrainRandoSubj object with the randomization data
#' @param nobs the number of observations in the dataset by default
#'  the number of rows in RandoDataFrame
#' @param ResponseUnit a character string with the unit of the response
#' @param RespValues can be a fixed value intercept which will be repeated nobs times
#' or a numerical vector of the same lenght than nobs.
#' @return response TrainRandoResp object with a response variable
#'  (dependent variable)
#' @examples
#' data("myArms","myRandoDataFrame","myprogfact")
#' myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame, ResponseUnit='Weight (in kg)',RespValues=70)
#' @export
#'
AddAResponse <- function(RandoDataFrame, nobs=NA, ResponseUnit='', RespValues)
{
if(is.na(nobs)){
nobs <- dim(RandoDataFrame)[1]
}
if(length(RespValues)==1){
responseValues <- rep(RespValues,times=nobs)
}
else if(length(RespValues)==nobs){
responseValues <- RespValues
}
else {
stop(paste("RespValues should have a length of either 1 or equal to nobs (Here length(RespValue)=",length(RespValue),")",sep=''))
}
response <- list(Values=responseValues,ResponseUnit=ResponseUnit,DistributionOfError='',Model='Y = \n mu0',ModelWith='With \n')
class(response) <- c("TrainRandoResp","list")
return(response)
}
myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame,ResponseUnit='Serum NCC (in µg/L)',RespValues=60)
myResponse
myResponse <- RespAddFixedEffect(Response=myResponse,RandoDataFrame=myRandoDataFrame,ColID=3, BetaVector=c(-30,0))
myResponse
length(myResponse$Values)
length(myepsilon)
myepsilon
?gather
vignette("pivot")
myVarCovMatr
myepsilon
myZGamma
myRando<-as_tibble(myRandoDataFrame)
myRando
myResponse
myRandoMean <- add_column(myRando,myResponse$Values)
myRandoMean
myRandoMean
myZGamma
myRandoXBetaZGamma <- add_column(myRando,myResponse$Values,myZGamma)
myRandoXBetaZGamma
XBeta <- myResponse$Values
myRandoXBetaZGamma <- add_column(myRando,XBeta,myZGamma)
myRandoXBetaZGamma
myRandoXBetaZGamma <- add_column(myRando,myXBeta,myZGamma)
myXBeta <- myResponse$Values
myRandoXBetaZGamma <- add_column(myRando,myXBeta,myZGamma)
myRandoXBetaZGammaEpsilon <- dplyr::full_join(x=myRandoXBetaZGamma, y=myepsilon)
myepsilon
myRandoXBetaZGammaEpsilon
View(myRandoXBetaZGammaEpsilon)
readr::write_excel_csv(myRandoXBetaZGammaEpsilon,path='V:/gmp-orphan/GMPO_131_002/STAT/SAP')
readr::write_excel_csv(myRandoXBetaZGammaEpsilon,path='V:/gmp-orphan/GMPO_131_002/STAT/SAP/Simdata.csv')
dplyr::mutate(myRandoXBetaZGammaEpsilon,Y=myXBeta+myZGamma+Residuals)
myRandoXBetaZGammaEpsilon
myRandoXBetaZGammaEpsilonY <- dplyr::mutate(myRandoXBetaZGammaEpsilon,Y=myXBeta+myZGamma+Residuals)
readr::write_excel_csv(myRandoXBetaZGammaEpsilonY,path='V:/gmp-orphan/GMPO_131_002/STAT/SAP/Simdata.csv')
lenght(myRandoXBetaZGammaEpsilonY)
length(myRandoXBetaZGammaEpsilonY)
dim(myRandoXBetaZGammaEpsilonY)
dim(myRandoXBetaZGammaEpsilonY)[1]
dim(myRandoXBetaZGammaEpsilonY)[1]
myRandoXBetaZGammaEpsilonY
?rbinom
rbinom(n=dim(myRandoXBetaZGammaEpsilonY)[1], prob=0.10)
# Generate missing data
rbinom(size=dim(myRandoXBetaZGammaEpsilonY)[1], prob=0.10)
# Generate missing data
rbinom(size=dim(myRandoXBetaZGammaEpsilonY)[1], prob=0.10)
nobs<-dim(myRandoXBetaZGammaEpsilonY)[1]
# Generate missing data
rbinom(n=nobs,size=nobs, prob=0.10)
# Generate missing data
rbinom(n=1,size=nobs, prob=0.10)
# Generate missing data
rbinom(n=nobs,size=1, prob=0.10)
# Generate missing data
rbinom(n=nobs,size=1, prob=0.15)
# Generate missing data
rbinom(n=nobs,size=1, prob=0.15)
# Generate missing data
myRandoXBetaZGammaEpsilonY[myRandoXBetaZGammaEpsilonY,]
Missing<-rbinom(n=nobs,size=1, prob=0.15)
# Generate missing data
myRandoXBetaZGammaEpsilonY[Missing,]
dim(myRandoXBetaZGammaEpsilonY[Missing,])
length(Missing)
Missing<-rbinom(n=nobs,size=1, prob=0.15)
myRandoXBetaZGammaEpsilonY[Missing,]
Missing<-rbinom(n=nobs,size=1, prob=0.05)
myRandoXBetaZGammaEpsilonY[Missing,]
Missing<-rbinom(n=nobs,size=1, prob=0.01)
myRandoXBetaZGammaEpsilonY[Missing,]
myRandoXBetaZGammaEpsilonY[Missing,]$Y=NA
myRandoXBetaZGammaEpsilon
View(myRandoXBetaZGammaEpsilonY)
View(myRandoXBetaZGammaEpsilonY)
myRandoXBetaZGammaEpsilonY[Missing,]$Y
myRandoXBetaZGammaEpsilonY
Missing
View(myRandoXBetaZGammaEpsilonY)
View(myRandoXBetaZGammaEpsilonY)
myRandoXBetaZGammaEpsilonY[Missing,]$Y=rep(NA,n=nobs)
myRandoXBetaZGammaEpsilonY
View(myRandoXBetaZGammaEpsilonY)
View(myRandoXBetaZGammaEpsilonY)
?mutate_if
?dplyr
browseVignettes(package = "dplyr")
browseVignettes(package = "dplyr")
nycflights13::flights
library(nycflights13)
install.packages("nycflights13")
dim(flights)
library(nycflights13)
dim(flights)
flights
dplyr::filter(flights,dep_time<517)
dplyr::filter(flights,dep_time>517)
dplyr::filter(flights,dep_time>517,arr_time<1000)
df <- select(flights, year:dep_time)
df <- dplyr::select(flights, year:dep_time)
df
df <- dplyr::select(flights, year,dep_time)
df
df <- dplyr::select(flights, year,1)
df
df <- dplyr::select(flights, year,2)
df
df <- dplyr::select(flights, year,5)
df
var <- seq(1, nrow(df))
var
mutate(df, new = var)
dplyr::mutate(df, new = var)
df
group_by(df, month)
library(dplyr)
df
df
group_by(df, month)
df <- select(flights, year:dep_time)
group_by(df, month)
dk
dim(df)
dim(group_by(df, month))
q<-group_by(df, month)
dim(q)
?mutate_if
mutate_at(myRandoXBetaZGammaEpsilonY,Y,if(Missing){NA})
myRandoXBetaZGammaEpsilonY
mutate_at(myRandoXBetaZGammaEpsilonY,Y[,1],if(Missing){NA})
myRandoXBetaZGammaEpsilonY <- dplyr::mutate(myRandoXBetaZGammaEpsilon,Y=myXBeta+myZGamma+Residuals)
myRandoXBetaZGammaEpsilonY
select(myRandoXBetaZGammaEpsilonY,3:6)
myRando
myXBeta
myXBeta <- tibble::as_tibble(myResponse$Values)
myVarCovMatr <- UniformCorrelation(rho=0.75,sigma2=800,nTimePoints=7)
myepsilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=7, RandoDataFrame=myRandoDataFrame)
myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10)
myRando<-tibble::as_tibble(myRandoDataFrame)
myRandoXBetaZGamma <- tibble::add_column(myRando,myXBeta,myZGamma)
myRandoXBetaZGammaEpsilon <- dplyr::full_join(x=myRandoXBetaZGamma, y=myepsilon)
myRandoXBetaZGammaEpsilonY <- dplyr::mutate(myRandoXBetaZGammaEpsilon,Y=myXBeta+myZGamma+Residuals)
myXBeta
myResponse$Values
myResponse$Values
myResponse$Values
myXBetavect <- myResponse$Values
myXBetavect
myXBetavect <- as.vecto(myResponse$Values)
myXBetavect <- as.vector(myResponse$Values)
myXBetavect
myXBeta <- tibble::as_tibble(myXBetavect)
myResponse$Values
?enframe
myXBeta <- tibble::enframe(myResponse$Values)
myXBeta <- tibble::enframe(myResponse$Values[[1]])
myXBeta
myResponse$Values[[1]]
myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame,ResponseUnit='Serum NCC (in µg/L)',RespValues=60)
myResponse <- RespAddFixedEffect(Response=myResponse,RandoDataFrame=myRandoDataFrame,ColID=3, BetaVector=c(-30,0))
myResponse$Values
myXBeta <- tibble::enframe(as.vector(myResponse$Values))
myXBeta
myXBeta <- tibble::enframe(as.vector(myResponse$Values),name="XBeta")
myXBeta
myXBeta <- tibble::enframe(as.vector(myResponse$Values),name="Order",value="XBeta")
myXBeta
myXBeta <- as.vector(myResponse$Values)
myVarCovMatr <- UniformCorrelation(rho=0.75,sigma2=800,nTimePoints=7)
myepsilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=7, RandoDataFrame=myRandoDataFrame)
myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10)
myRando<-tibble::as_tibble(myRandoDataFrame)
myRandoXBetaZGamma <- tibble::add_column(myRando,myXBeta,myZGamma)
myRandoXBetaZGamma
myZGamma
myZGamma <- as.vector(RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10))
myRando<-tibble::as_tibble(myRandoDataFrame)
myRandoXBetaZGamma <- tibble::add_column(myRando,myXBeta,myZGamma)
myRandoXBetaZGammaEpsilon <- dplyr::full_join(x=myRandoXBetaZGamma, y=myepsilon)
myRandoXBetaZGammaEpsilon
myRandoXBetaZGammaEpsilonY <- dplyr::mutate(myRandoXBetaZGammaEpsilon,Y=myXBeta+myZGamma+Residuals)
myRandoXBetaZGammaEpsilonY
mutate_at(myRandoXBetaZGammaEpsilonY,Y,if(Missing){NA})
mutate_at(myRandoXBetaZGammaEpsilonY,Y,if(Missing){NA})
select(myRandoXBetaZGammaEpsilonY,3:6)
select(myRandoXBetaZGammaEpsilonY,3:7)
?tidyr
nobs<-dim(myRandoXBetaZGammaEpsilonY)[1]
Missing<-rbinom(n=nobs,size=1, prob=0.15)
Missing
library(trainingrando)
myprogfact <- CreatePrgFact(progfactLabel = "Sites",progfactLevels=c("Site01", "Site02","Site03","Site04","Site05","Site06","Site07","Site08","Site09","Site10","Site11","Site12","Site13","Site14","Site15"))
myArms <- ArmLevelProg(data.frame("Name" = c('TETA 4HCL', 'Penicillamine')))
myRandoDataFrame <- GenStudyTrial(npat = 46, progfact = myprogfact, Arms=myArms)
# Mean NCC = 60 µg/L SD=30 µg/L
myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame,ResponseUnit='Serum NCC (in µg/L)',RespValues=60)
myResponse <- RespAddFixedEffect(Response=myResponse,RandoDataFrame=myRandoDataFrame,ColID=3, BetaVector=c(-30,0))
myXBeta <- as.vector(myResponse$Values)
myVarCovMatr <- UniformCorrelation(rho=0.75,sigma2=800,nTimePoints=7)
myepsilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=7, RandoDataFrame=myRandoDataFrame)
myZGamma <- as.vector(RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10))
myRando<-tibble::as_tibble(myRandoDataFrame)
myRandoXBetaZGamma <- tibble::add_column(myRando,myXBeta,myZGamma)
myRandoXBetaZGammaEpsilon <- dplyr::full_join(x=myRandoXBetaZGamma, y=myepsilon)
myRandoXBetaZGammaEpsilonY <- dplyr::mutate(myRandoXBetaZGammaEpsilon,Y=myXBeta+myZGamma+Residuals)
readr::write_excel_csv(myRandoXBetaZGammaEpsilonY,path='V:/gmp-orphan/GMPO_131_002/STAT/SAP/Simdata.csv')
