#' @return VarCovMatr a VarCovMatr object which is a squared matrix defining the covariance structure.
#' @examples
#' VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6,subject=myRandoDataFrame$usubjid)
#' @import matrixcalc
#' @export
UniformCorrelation <- function(rho,sigma2,nTimePoints,subject)
{
if(abs(rho)>1){
print(rho)
stop(paste("rho shoul be between -1 and 1 (Here rho=",rho,")"))
}
if(sigma2<0){
print(sigma2)
stop(paste("sigma2 cannot be negative",sigma2,")"))
}
UC <- sigma2*(matrix(rho,nrow=nTimePoints, ncol=nTimePoints) - rho*diag(nTimePoints) + diag(nTimePoints))
if(!matrixcalc::is.positive.semi.definite(UC)){
print(UC)
stop('The variance covariance matrix is not semi positive definite')
}
return(UC)
}
VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6,subject=myRandoDataFrame$usubjid)
VarCovMatr <- UniformCorrelation(rho=5,sigma2=2,nTimePoints=6,subject=myRandoDataFrame$usubjid)
VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=-2,nTimePoints=6,subject=myRandoDataFrame$usubjid)
#' UniformCorrelation
#'
#' @param rho the pearson correlation parameter (should be between -1 and 1)
#' @param sigma2 the residual variance
#' @param nTimePoints the number of timepoints
#' @param subject the vector of subject.
#' @return VarCovMatr a VarCovMatr object which is a squared matrix defining the covariance structure.
#' @examples
#' VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6,subject=myRandoDataFrame$usubjid)
#' @import matrixcalc
#' @export
UniformCorrelation <- function(rho,sigma2,nTimePoints,subject)
{
if(abs(rho)>1){
print(rho)
stop(paste("rho should be between -1 and 1 (Here rho=",rho,")",sep=''))
}
if(sigma2<0){
print(sigma2)
stop(paste("sigma2 cannot be negative",sigma2,")"))
}
UC <- sigma2*(matrix(rho,nrow=nTimePoints, ncol=nTimePoints) - rho*diag(nTimePoints) + diag(nTimePoints))
if(!matrixcalc::is.positive.semi.definite(UC)){
print(UC)
stop('The variance covariance matrix is not semi positive definite')
}
return(UC)
}
Exp <- rep(x=115,times=6)
rmvnormVect <- rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
rmvnormVect
rmvnormVect <- rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
rmvnormVect
var(rmvnormVect)
rmvnormVect <- rmvnorm(n=500, mean=Exp, sigma=VarCovMatr)
var(rmvnormVect)
VarCovMatr
rmvnormVect <- rmvnorm(n=5000, mean=Exp, sigma=VarCovMatr)
VarCovMatr
var(rmvnormVect)
Exp <- rep(x=0,times=6)
rmvnormVect <- rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
var(rmvnormVect)
myrandomeffect <- myRandoDataFrame$usubjid
myrandomeffect
myrandomeffect <- myRandoDataFrame$usubjid
length(unique(myrandomeffect))
length(unique(myrandomeffect))
nlevelRando <- length(unique(myrandomeffect))
myrandomeffect <- myRandoDataFrame$usubjid
nlevelRando <- length(unique(myrandomeffect))
VARRandoEffect <- 10
rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
EffectRando1
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
EffectRando1
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
EffectRando1
myRandoDataFrame$V2
myrandomeffect <- myRandoDataFrame$V2
nlevelRando <- length(unique(myrandomeffect))
VARRandoEffect <- 10
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
EffectRando1
??dummyVars
install.packages("dummy")
install.packages("dummies")
dummy( as.factor(letters)[c(1,1,1,1)] )
llibrary(dummies)
library(dummies)
dummy( as.factor(letters)[c(1,1,1,1)] )
dummy( as.factor(letters))
letters <- c( "a", "a", "b", "c", "d", "e", "f", "g", "h", "b", "b" )
dummy( as.character(letters) )
dummies::dummy(myRandoDataFrame$V2)
myRandoDataFrame$V2
dummies::dummy(myRandoDataFrame$V2)
dum <- dummies::dummy(myRandoDataFrame$V2)
dum <- dummies::dummy(myRandoDataFrame$V2)
dim(dum)
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
EffectRando1
dum %*% EffectRando1
cbind(dum %*% EffectRando1,myRandoDataFrame$V2)
rmvnormVect <- rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
rmvnormVect
rmvnormVect
rmvnormVect
c(1,0,0,0,0, 0)
rmvnormVect <- rmvnorm(n=5, mean=Exp, sigma=VarCovMatr)
Proj01 <- rmvnormVect %*% c(1,0,0,0,0, 0)
rmvnormVect
Proj01 <- rmvnormVect %*% c(1,0,0,0,0, 0)
Proj01
rmvnormVect <- rmvnorm(n=5, mean=Exp, sigma=VarCovMatr)
rmvnormVect
rmvnormVect <- rmvnorm(n=5, mean=Exp, sigma=VarCovMatr)
rmvnormVect
rmvnormTibbles<- as.tibbles(rmvnormMatrix)
?tibbles
library(tibbles)
install.packages("tibble")
library(tibble)
tibble::as_tibble(rmvnormMatrix)
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
rmvnormMatrix <- rmvnorm(n=5, mean=Exp, sigma=VarCovMatr)
rmvnormMatrix <- rmvnorm(n=5, mean=Exp, sigma=VarCovMatr)
??rmvnorm
rmvnormMatrix <- mvtnorm::rmvnorm(n=5, mean=Exp, sigma=VarCovMatr)
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
dimnames(rmvnormMatrix)
paste("Visit-",seq(1,8),sep='')
dimnames(rmvnormMatrix) <- paste("TimePoint-",seq(1,8),sep='')
paste("TimePoint-",seq(1,8),sep='')
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint-",seq(1,8),sep='')
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint-",seq(1,6),sep='')
rmvnormMatrix
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint_",seq(1,6),sep='')
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
rmvnormTibbles
dimnames(rmvnormMatrix)[[1]] <- myRandoDataFrame$usubjid
rmvnormMatrix <- mvtnorm::rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint_",seq(1,6),sep='')
dimnames(rmvnormMatrix)[[1]] <- myRandoDataFrame$usubjid
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
rmvnormTibbles
dimnames(rmvnormMatrix)[[1]] <- myRandoDataFrame$usubjid
rmvnormTibbles
View(rmvnormTibbles)
rmvnormTibbles$usubjid <- myRandoDataFrame$usubjid
rmvnormTibbles
rmvnormMatrix <- mvtnorm::rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint_",seq(1,6),sep='')
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
rmvnormTibbles$usubjid <- myRandoDataFrame$usubjid
rmvnormTibbles
gather(rmvnormTibbles,`TimePoint_1` ,`TimePoint_2`,`TimePoint_3`, `TimePoint_4`, `TimePoint_5`,`TimePoint_6`, key="TimePoint",value="NCC")
install.packages("tidyr")
tidyr::gather(rmvnormTibbles,`TimePoint_1` ,`TimePoint_2`,`TimePoint_3`, `TimePoint_4`, `TimePoint_5`,`TimePoint_6`, key="TimePoint",value="NCC")
ZGamma1 <- dum %*% EffectRando1
ZGamma1
# SAS SAT stat 14.3 User guide Linear Model page 117
# Y = X beta + Z gamma + epsilon
# whith Gamma ~ N(0,G) and epsilon ~ N(0,R)
#' UniformCorrelation
#'
#' @param rho the pearson correlation parameter (should be between -1 and 1)
#' @param sigma2 the residual variance
#' @param nTimePoints the number of timepoints
#' @return VarCovMatr a VarCovMatr object which is a squared matrix defining the covariance structure.
#' @examples
#' VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6)
#' @import matrixcalc
#' @export
UniformCorrelation <- function(rho,sigma2,nTimePoints,subject)
{
if(abs(rho)>1){
print(rho)
stop(paste("rho should be between -1 and 1 (Here rho=",rho,")",sep=''))
}
if(sigma2<0){
print(sigma2)
stop(paste("sigma2 cannot be negative",sigma2,")"))
}
UC <- sigma2*(matrix(rho,nrow=nTimePoints, ncol=nTimePoints) - rho*diag(nTimePoints) + diag(nTimePoints))
if(!matrixcalc::is.positive.semi.definite(UC)){
print(UC)
stop('The variance covariance matrix is not semi positive definite')
}
return(UC)
}
?UniformCorrelation
VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6)
# Creation of the epsilon matrix
Exp <- rep(x=0,times=6)
rmvnormMatrix <- mvtnorm::rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint_",seq(1,6),sep='')
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
rmvnormTibbles$usubjid <- myRandoDataFrame$usubjid
tidyr::gather(rmvnormTibbles,`TimePoint_1` ,`TimePoint_2`,`TimePoint_3`, `TimePoint_4`, `TimePoint_5`,`TimePoint_6`, key="TimePoint",value="Residuals")
# Creation of a column of the random effect
myrandomeffect <- myRandoDataFrame$V2
nlevelRando <- length(unique(myrandomeffect))
VARRandoEffect <- 10
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
dum <- dummies::dummy(myRandoDataFrame$V2)
ZGamma1 <- dum %*% EffectRando1
ZGamma1
Exp <- rep(x=0,times=6)
Exp
nTimePoints
Exp <- rep(x=0,times=nTimePoints)
Exp
Exp <- rep(x=0,times=nTimePoints)
rmvnormMatrix <- mvtnorm::rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint_",seq(1,nTimePoints),sep='')
rmvnormMatrix
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint_",seq(1,nTimePoints),sep='')
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
rmvnormTibbles$usubjid <- myRandoDataFrame$usubjid
rmvnormTibbles
tidyr::gather(rmvnormTibbles,`TimePoint_1` ,`TimePoint_2`,`TimePoint_3`, `TimePoint_4`, `TimePoint_5`,`TimePoint_6`, key="TimePoint",value="Residuals")
epsilon <- tidyr::gather(rmvnormTibbles,`TimePoint_1` ,`TimePoint_2`,`TimePoint_3`, `TimePoint_4`, `TimePoint_5`,`TimePoint_6`, key="TimePoint",value="Residuals")
epsilon
#' espsilonVarCov
#'
#' @param VarCovMatr a VarCovMatr object which is a squared matrix defining the covariance structure
#' @param nTimePoints the number of timepoints
#' @return ZGamma1
#' @examples
#' @import mvtnorm, tidyr
#' @export
espsilonVarCov <- function(VarCovMatr, nTimePoints){
# Creation of the epsilon vector
Exp <- rep(x=0,times=nTimePoints)
rmvnormMatrix <- mvtnorm::rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint_",seq(1,nTimePoints),sep='')
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
rmvnormTibbles$usubjid <- myRandoDataFrame$usubjid
epsilon <- tidyr::gather(rmvnormTibbles,`TimePoint_1` ,`TimePoint_2`,`TimePoint_3`, `TimePoint_4`, `TimePoint_5`,`TimePoint_6`, key="TimePoint",value="Residuals")
return(epsilon)
}
#' UniformCorrelation
#'
#' @param rho the pearson correlation parameter (should be between -1 and 1)
#' @param sigma2 the residual variance
#' @param nTimePoints the number of timepoints
#' @return VarCovMatr a VarCovMatr object which is a squared matrix defining the covariance structure.
#' @examples
#' VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6)
#' @import matrixcalc
#' @export
UniformCorrelation <- function(rho,sigma2,nTimePoints)
{
if(abs(rho)>1){
print(rho)
stop(paste("rho should be between -1 and 1 (Here rho=",rho,")",sep=''))
}
if(sigma2<0){
print(sigma2)
stop(paste("sigma2 cannot be negative",sigma2,")"))
}
UC <- sigma2*(matrix(rho,nrow=nTimePoints, ncol=nTimePoints) - rho*diag(nTimePoints) + diag(nTimePoints))
if(!matrixcalc::is.positive.semi.definite(UC)){
print(UC)
stop('The variance covariance matrix is not semi positive definite')
}
return(UC)
}
VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6)
head(VarCovMatr)
myVarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6)
myVarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6)
myespilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=6)
myespilon
myrandomeffect <- myRandoDataFrame$V2
myrandomeffect
class(myrandomeffect)
mode(myrandomeffect)
myRandoDataFrame$V2
#' RandomEffect
#'
#' @description Creation of a vector of the random effect
#' @param myrandomeffect an independent variable which is modeled as a random effect.
#' @param VARRandoEffect The variance of the random effect
#' @return ZGamma1
#' @examples myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10)
#' @export
RandomEffect <- function(randomeffect,VARRandoEffect)
nlevelRando <- length(unique(randomeffect))
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
dum <- dummies::dummy(randomeffect)
ZGamma <- dum %*% EffectRando1
}
#' RandomEffect
#'
#' @description Creation of a vector of the random effect
#' @param myrandomeffect an independent variable which is modeled as a random effect.
#' @param VARRandoEffect The variance of the random effect
#' @return ZGamma1
#' @examples myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10)
#' @export
RandomEffect <- function(randomeffect,VARRandoEffect)
{
nlevelRando <- length(unique(randomeffect))
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
dum <- dummies::dummy(randomeffect)
ZGamma <- dum %*% EffectRando1
}
# SAS SAT stat 14.3 User guide Linear Model page 117
# Y = X beta + Z gamma + epsilon
# whith Gamma ~ N(0,G) and epsilon ~ N(0,R)
#' UniformCorrelation
#'
#' @param rho the pearson correlation parameter (should be between -1 and 1)
#' @param sigma2 the residual variance
#' @param nTimePoints the number of timepoints
#' @return VarCovMatr a VarCovMatr object which is a squared matrix defining the covariance structure.
#' @examples
#' VarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6)
#' @import matrixcalc
#' @export
UniformCorrelation <- function(rho,sigma2,nTimePoints)
{
if(abs(rho)>1){
print(rho)
stop(paste("rho should be between -1 and 1 (Here rho=",rho,")",sep=''))
}
if(sigma2<0){
print(sigma2)
stop(paste("sigma2 cannot be negative",sigma2,")"))
}
UC <- sigma2*(matrix(rho,nrow=nTimePoints, ncol=nTimePoints) - rho*diag(nTimePoints) + diag(nTimePoints))
if(!matrixcalc::is.positive.semi.definite(UC)){
print(UC)
stop('The variance covariance matrix is not semi positive definite')
}
return(UC)
}
#' espsilonVarCov
#'
#' @param VarCovMatr a VarCovMatr object which is a squared matrix defining the covariance structure
#' @param nTimePoints the number of timepoints
#' @return epsilon
#' @examples myespilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=6)
#' @import mvtnorm, tidyr
#' @export
espsilonVarCov <- function(VarCovMatr, nTimePoints){
# Creation of the epsilon vector
Exp <- rep(x=0,times=nTimePoints)
rmvnormMatrix <- mvtnorm::rmvnorm(n=50, mean=Exp, sigma=VarCovMatr)
dimnames(rmvnormMatrix)[[2]] <- paste("TimePoint_",seq(1,nTimePoints),sep='')
rmvnormTibbles<- tibble::as_tibble(rmvnormMatrix)
rmvnormTibbles$usubjid <- myRandoDataFrame$usubjid
epsilon <- tidyr::gather(rmvnormTibbles,`TimePoint_1` ,`TimePoint_2`,`TimePoint_3`, `TimePoint_4`, `TimePoint_5`,`TimePoint_6`, key="TimePoint",value="Residuals")
return(epsilon)
}
#' RandomEffect
#'
#' @description Creation of a vector of the random effect
#' @param myrandomeffect an independent variable which is modeled as a random effect.
#' @param VARRandoEffect The variance of the random effect
#' @return ZGamma1
#' @examples myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10)
#' @import dummies
#' @export
RandomEffect <- function(randomeffect,VARRandoEffect)
{
nlevelRando <- length(unique(randomeffect))
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
dum <- dummies::dummy(randomeffect)
ZGamma <- dum %*% EffectRando1
}
??mvtnorm
?mvtnorm
randomeffect=myRandoDataFrame$V2
VARRandoEffect=10
nlevelRando <- length(unique(randomeffect))
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
dum <- dummies::dummy(randomeffect)
dum
?dummies
?matrixcalc
??matrixcalc
install.packages("matrixcalc")
library(usethis)
usethis::use_package("dummies")
usethis::use_package("dummies::dummy")
library(dummies)
install.packages("dummies")
usethis::use_package("dummies::dummy")
usethis::use_package("dummies")
library(dummies)
usethis::use_package("dummies")
usethis::use_package("dummies::dummy")
library(trainingrando)
library(trainingrando)
library(trainingrando)
devtools::use_package(dummies)
?dummies
devtools::use_package(dummies)
usethis::use_package(dummies)
usethis::use_package("dummies")
#' RandomEffect
#'
#' @description Creation of a vector of the random effect
#' @param myrandomeffect an independent variable which is modeled as a random effect.
#' @param VARRandoEffect The variance of the random effect
#' @return ZGamma1
#' @examples myZGamma <- RandomEffect(randomeffect=myRandoDataFrame$V2, VARRandoEffect=10)
#' @import dummies
#' @export
RandomEffect <- function(randomeffect,VARRandoEffect)
{
nlevelRando <- length(unique(randomeffect))
EffectRando1 <- rnorm(n=nlevelRando,mean=0,sd=sqrt(VARRandoEffect))
dum <- dummies::dummy(randomeffect)
ZGamma <- dum %*% EffectRando1
return(ZGamma)
}
usethis::use_package("dummies::dummy")
usethis::use_package("dummies::dummy")
usethis::use_package("dummies")
usethis::use_package("tibble")
library(devtools)
devtools::document()
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
1+1
mean(1,3)
mean(1,4)
mean(1,4)
mean(1,40)
mean(1,40)
mean(c(1,40))
library(trainingrando)
myprogfact <- CreatePrgFact(progfactLabel = "Age Group",progfactLevels=c("0-18 years", "19-35 years","36-60 years","> 60 years"))
myprogfact <- AddNewPrgFact(currentProgfact=myprogfact,progfactLabel = "Type of Tumor",progfactLevels=c("A", "B","C"))
myprogfact <- AddNewPrgFact(currentProgfact=myprogfact,progfactLabel = "Genotype.",progfactLevels=c("Genotype A", "Genotype B","Genotype C"))
devtools::use_data(myprogfact)
usethis::use_data(myprogfact)
usethis::use_data(myprogfact, overwrite = TRUE)
myArms <- ArmLevelProg(data.frame("Name" = c('Placebo', 'Treatement1','Treatement2','Treatement3')))
usethis::use_data(myArms, overwrite = TRUE)
myRandoDataFrame <- GenStudyTrial(npat = 25, progfact = myprogfact, Arms=myArms)
usethis::use_data(myRandoDataFrame, overwrite = TRUE)
myVarCovMatr <- UniformCorrelation(rho=0.5,sigma2=2,nTimePoints=6)
View(myVarCovMatr)
View(myVarCovMatr)
usethis::use_data(myVarCovMatr, overwrite = TRUE)
myespilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=6)
usethis::use_data(myespilon, overwrite = TRUE)
usethis::use_data(myepsilon, overwrite = TRUE)
myepsilon <- espsilonVarCov(VarCovMatr=myVarCovMatr, nTimePoints=6)
usethis::use_data(myepsilon, overwrite = TRUE)
View(myArms)
View(myArms)
?ArmLevelProg
class(myArms)
dim(myArms)
install.packages(c("assertthat", "backports", "callr", "cli", "clipr", "curl", "devtools", "digest", "dplyr", "fs", "gh", "git2r", "glue", "httr", "jsonlite", "knitr", "mime", "mvtnorm", "openssl", "pkgbuild", "prettyunits", "processx", "ps", "R6", "rcmdcheck", "remotes", "rlang", "rmarkdown", "rstudioapi", "stringi", "sys", "testthat", "tidyselect", "usethis", "vctrs", "whisker", "yaml"))
install.packages(c("foreign", "lattice"), lib="C:/Users/ndubois/Documents/myRPackages/trainingrando/packrat/lib-R/x86_64-w64-mingw32/3.5.0")
library(assertthat)
detach("package:assertthat", unload = TRUE)
packrat::set_opts(external.packages = c("mvtnorm", "tidyr", "matrixcalc", "stats", "dummies", "tibble"))
install.packages("dummies")
packrat::set_opts(external.packages = c("mvtnorm", "tidyr", "matrixcalc", "stats", "dummies", "tibble"))
install.packages("dummies")
remove.packages("dummies", lib="~/myRPackages/trainingrando/packrat/lib/x86_64-w64-mingw32/3.5.0")
install.packages("dummies")
reboot
reboot()
library(dummies, lib.loc = "C:/Users/ndubois/Documents/myRPackages/trainingrando/packrat/lib-ext/x86_64-w64-mingw32/3.5.0")
packrat::set_opts(external.packages = c("mvtnorm", "tidyr", "matrixcalc", "stats", "dummies", "tibble"))
packrat::snapshot(prompt = FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(trainingrando)
myprogfact <- CreatePrgFact(progfactLabel = "Age Group",progfactLevels=c("0-18 years", "19-35 years","36-60 years","> 60 years"))
myprogfact <- AddNewPrgFact(currentProgfact=myprogfact,progfactLabel = "Type of Tumor",progfactLevels=c("A", "B","C"))
myprogfact <- AddNewPrgFact(currentProgfact=myprogfact,progfactLabel = "Genotype.",progfactLevels=c("Genotype A", "Genotype B","Genotype C"))
myArms <- ArmLevelProg(data.frame("Name" = c('Placebo', 'Treatement1','Treatement2','Treatement3')))
class(myprogfact)
is.list(TrainRandoProgFact)
is.list(myprogfact)
?myArms
library(trainingrando)
?myArms
?traininrando
myRandoDataFrame <- AddFirstSubject(progfact=myprogfact,Arms=myArms)
myRandoDataFrame <- GenStudyTrial(npat = 25, progfact = myprogfact, Arms=myArms)
View(myRandoDataFrame)
View(myRandoDataFrame)
?GenStudyTrial
class(myRandoDataFrame)
myResponse <- AddAResponse(RandoDataFrame=myRandoDataFrame,ResponseUnit='Weight (in kg)',Intercept=70)
myResponse <- RespAddFixedEffect(Response=myResponse,RandoDataFrame=myRandoDataFrame,ColID=2, BetaVector=c(-1,0,0,1))
class(myResponse)
